#pragma kernel CheckerRenderer
#pragma kernel CheckerFindClosest

RWTexture2D<float4> Result;
struct CellStruct 
{
    float2 position;
    float2 size;
    float isActive;
};
StructuredBuffer<CellStruct> _CellBuffer;
int _cellCount;
float4 _screenParam;



float3 _cursorPos;
struct CellStruct_WS 
{
    float3 position;
    float isActive;
};
RWStructuredBuffer<CellStruct_WS> _CellBuffer_WS;
float _erase;



float DrawBox(float2 uv, float2 pos, float2 size, float active) 
{
    float2 lowerLeft = pos - size * 0.5;
    float2 upperRight = pos + size * 0.5;
    float2 stepValue = step(lowerLeft, uv) - step(upperRight, uv);
    return stepValue.x * stepValue.y * active;
}

float DrawChecker(float2 uv) 
{
    float result = 0;
    for (int i = 0; i < _cellCount; i++) 
        result += DrawBox(uv, _CellBuffer[i].position, _CellBuffer[i].size, _CellBuffer[i].isActive);
    return result;
}

[numthreads(10,10,1)]
void CheckerRenderer (uint3 id : SV_DispatchThreadID)
{
   
    float2 uv = float2 (id.x / (_screenParam.x - 1), id.y / (_screenParam.y - 1));
    float box = DrawChecker(uv);
    Result[id.xy] = float4(box.xxx,1);

}

[numthreads(32, 1, 1)]
void CheckerFindClosest(uint3 id : SV_DispatchThreadID)
{
    float dist = distance(_cursorPos, _CellBuffer_WS[id.x].position) ;

    _CellBuffer_WS[id.x].isActive = _erase == 0?
        dist < 1.5 ? 1 : _CellBuffer_WS[id.x].isActive
        :
        dist < 1.5 ? 0: _CellBuffer_WS[id.x].isActive;
}

